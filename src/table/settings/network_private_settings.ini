; This file is part of OpenTTD.
; OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
; OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
; See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
;

; Network settings as stored in the private configuration file ("private.cfg").

[pre-amble]
static constexpr std::initializer_list<const char*> _use_relay_service{"never", "ask", "allow"};
static constexpr std::initializer_list<const char*> _participate_survey{"ask", "no", "yes"};

static const SettingVariant _network_private_settings_table[] = {
[post-amble]
};
[templates]
SDTC_BOOL  =  SDTC_BOOL(              $var,        $flags, $def,                              $str, $strhelp, $strval, $pre_cb, $post_cb, $str_cb, $help_cb, $val_cb, $from, $to,        $cat, $extra, $startup),
SDTC_OMANY = SDTC_OMANY(              $var, $type, $flags, $def,             $max, $full,     $str, $strhelp, $strval, $pre_cb, $post_cb, $str_cb, $help_cb, $val_cb, $from, $to,        $cat, $extra, $startup),
SDTC_SSTR  =  SDTC_SSTR(              $var, $type, $flags, $def,             $length,                                  $pre_cb, $post_cb, $from, $to,        $cat, $extra, $startup),

[validation]
SDTC_OMANY = static_assert($max <= MAX_$type, "Maximum value for $var exceeds storage size");

[defaults]
flags    = SF_NONE
interval = 0
str      = STR_NULL
strhelp  = STR_CONFIG_SETTING_NO_EXPLANATION_AVAILABLE_HELPTEXT
strval   = STR_NULL
pre_cb   = nullptr
post_cb  = nullptr
str_cb   = nullptr
help_cb  = nullptr
val_cb   = nullptr
load     = nullptr
from     = SL_MIN_VERSION
to       = SL_MAX_VERSION
cat      = SC_ADVANCED
extra    = 0
startup  = false



[SDTC_SSTR]
var      = network.client_name
type     = SLE_STR
length   = NETWORK_CLIENT_NAME_LENGTH
flags    = SF_NOT_IN_SAVE | SF_NO_NETWORK_SYNC
def      = nullptr
pre_cb   = NetworkValidateClientName
post_cb  = NetworkUpdateClientName
cat      = SC_BASIC

[SDTC_SSTR]
var      = network.server_name
type     = SLE_STR
length   = NETWORK_NAME_LENGTH
flags    = SF_NOT_IN_SAVE | SF_NO_NETWORK_SYNC | SF_NETWORK_ONLY
def      = nullptr
pre_cb   = NetworkValidateServerName
post_cb  = [](auto) { UpdateClientConfigValues(); }
cat      = SC_BASIC

[SDTC_SSTR]
var      = network.connect_to_ip
type     = SLE_STR
length   = 0
flags    = SF_NOT_IN_SAVE | SF_NO_NETWORK_SYNC
def      = nullptr

[SDTC_SSTR]
var      = network.last_joined
type     = SLE_STR
length   = 0
flags    = SF_NOT_IN_SAVE | SF_NO_NETWORK_SYNC
def      = """"
cat      = SC_EXPERT

[SDTC_OMANY]
var      = network.use_relay_service
type     = SLE_UINT8
flags    = SF_GUI_DROPDOWN | SF_NOT_IN_SAVE | SF_NO_NETWORK_SYNC
def      = URS_ASK
min      = URS_NO
max      = URS_ALLOW
full     = _use_relay_service
str      = STR_CONFIG_SETTING_USE_RELAY_SERVICE
strhelp  = STR_CONFIG_SETTING_USE_RELAY_SERVICE_HELPTEXT
strval   = STR_CONFIG_SETTING_USE_RELAY_SERVICE_NEVER
cat      = SC_BASIC

[SDTC_OMANY]
var      = network.participate_survey
type     = SLE_UINT8
flags    = SF_NOT_IN_SAVE | SF_NO_NETWORK_SYNC
def      = PS_ASK
min      = PS_ASK
max      = PS_YES
full     = _participate_survey
