; This file is part of OpenTTD.
; OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
; OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
; See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
;

; These are settings that are company-wide. Meaning that if 1 player in a
; company changes them, it changes for all players.

[pre-amble]
static void UpdateAllServiceInterval(int32_t new_value);
static bool CanUpdateServiceInterval(VehicleType type, int32_t &new_value);
static void UpdateServiceInterval(VehicleType type, int32_t new_value);
static void SettingsValueAbsolute(const IntSettingDesc &sd, uint first_param, int32_t value);

static const SettingVariant _company_settings_table[] = {
[post-amble]
};
[templates]
SDT_BOOL = SDT_BOOL(CompanySettings, $var,        $flags, $def,                        $str, $strhelp, $strval, $pre_cb, $post_cb, $str_cb, $help_cb, $val_cb, $from, $to, $cat, $extra, $startup),
SDT_VAR  =  SDT_VAR(CompanySettings, $var, $type, $flags, $def, $min, $max, $interval, $str, $strhelp, $strval, $pre_cb, $post_cb, $str_cb, $help_cb, $val_cb, $from, $to, $cat, $extra, $startup),

[validation]
SDT_VAR = static_assert($max <= MAX_$type, "Maximum value for CompanySettings.$var exceeds storage size");

[defaults]
flags    = SF_PER_COMPANY
interval = 0
str      = STR_NULL
strhelp  = STR_CONFIG_SETTING_NO_EXPLANATION_AVAILABLE_HELPTEXT
strval   = STR_NULL
pre_cb   = nullptr
post_cb  = nullptr
str_cb   = nullptr
help_cb  = nullptr
val_cb   = nullptr
load     = nullptr
from     = SL_MIN_VERSION
to       = SL_MAX_VERSION
cat      = SC_ADVANCED
extra    = 0
startup  = false



[SDT_BOOL]
var      = engine_renew
def      = true
str      = STR_CONFIG_SETTING_AUTORENEW_VEHICLE
strhelp  = STR_CONFIG_SETTING_AUTORENEW_VEHICLE_HELPTEXT
cat      = SC_BASIC

[SDT_VAR]
var      = engine_renew_months
type     = SLE_INT16
flags    = SF_PER_COMPANY
def      = 6
min      = -12
max      = 12
str      = STR_CONFIG_SETTING_AUTORENEW_MONTHS
strhelp  = STR_CONFIG_SETTING_AUTORENEW_MONTHS_HELPTEXT
strval   = STR_CONFIG_SETTING_AUTORENEW_MONTHS_VALUE_BEFORE
val_cb   = SettingsValueAbsolute

[SDT_VAR]
var      = engine_renew_money
type     = SLE_UINT
flags    = SF_PER_COMPANY | SF_GUI_CURRENCY
def      = 100000
min      = 0
max      = 2000000
str      = STR_CONFIG_SETTING_AUTORENEW_MONEY
strhelp  = STR_CONFIG_SETTING_AUTORENEW_MONEY_HELPTEXT
strval   = STR_JUST_CURRENCY_LONG

[SDT_BOOL]
var      = renew_keep_length
def      = false

[SDT_BOOL]
var      = vehicle.servint_ispercent
def      = false
str      = STR_CONFIG_SETTING_SERVINT_ISPERCENT
strhelp  = STR_CONFIG_SETTING_SERVINT_ISPERCENT_HELPTEXT
post_cb  = UpdateAllServiceInterval

[SDT_VAR]
var      = vehicle.servint_trains
type     = SLE_UINT16
flags    = SF_PER_COMPANY | SF_GUI_0_IS_SPECIAL
def      = DEF_SERVINT_DAYS_TRAINS
min      = MIN_SERVINT_MINUTES
max      = MAX_SERVINT_DAYS
interval = 1
str      = STR_CONFIG_SETTING_SERVINT_TRAINS
strhelp  = STR_CONFIG_SETTING_SERVINT_TRAINS_HELPTEXT
strval   = STR_CONFIG_SETTING_SERVINT_VALUE
pre_cb   = [](auto &new_value) { return CanUpdateServiceInterval(VEH_TRAIN, new_value); }
post_cb  = [](auto new_value) { UpdateServiceInterval(VEH_TRAIN, new_value); }

[SDT_VAR]
var      = vehicle.servint_roadveh
type     = SLE_UINT16
flags    = SF_PER_COMPANY | SF_GUI_0_IS_SPECIAL
def      = DEF_SERVINT_DAYS_ROADVEH
min      = MIN_SERVINT_MINUTES
max      = MAX_SERVINT_DAYS
interval = 1
str      = STR_CONFIG_SETTING_SERVINT_ROAD_VEHICLES
strhelp  = STR_CONFIG_SETTING_SERVINT_ROAD_VEHICLES_HELPTEXT
strval   = STR_CONFIG_SETTING_SERVINT_VALUE
pre_cb   = [](auto &new_value) { return CanUpdateServiceInterval(VEH_ROAD, new_value); }
post_cb  = [](auto new_value) { UpdateServiceInterval(VEH_ROAD, new_value); }

[SDT_VAR]
var      = vehicle.servint_ships
type     = SLE_UINT16
flags    = SF_PER_COMPANY | SF_GUI_0_IS_SPECIAL
def      = DEF_SERVINT_DAYS_SHIPS
min      = MIN_SERVINT_MINUTES
max      = MAX_SERVINT_DAYS
interval = 1
str      = STR_CONFIG_SETTING_SERVINT_SHIPS
strhelp  = STR_CONFIG_SETTING_SERVINT_SHIPS_HELPTEXT
strval   = STR_CONFIG_SETTING_SERVINT_VALUE
pre_cb   = [](auto &new_value) { return CanUpdateServiceInterval(VEH_SHIP, new_value); }
post_cb  = [](auto new_value) { UpdateServiceInterval(VEH_SHIP, new_value); }

[SDT_VAR]
var      = vehicle.servint_aircraft
type     = SLE_UINT16
flags    = SF_PER_COMPANY | SF_GUI_0_IS_SPECIAL
def      = DEF_SERVINT_DAYS_AIRCRAFT
min      = MIN_SERVINT_MINUTES
max      = MAX_SERVINT_DAYS
interval = 1
str      = STR_CONFIG_SETTING_SERVINT_AIRCRAFT
strhelp  = STR_CONFIG_SETTING_SERVINT_AIRCRAFT_HELPTEXT
strval   = STR_CONFIG_SETTING_SERVINT_VALUE
pre_cb   = [](auto &new_value) { return CanUpdateServiceInterval(VEH_AIRCRAFT, new_value); }
post_cb  = [](auto new_value) { UpdateServiceInterval(VEH_AIRCRAFT, new_value); }
