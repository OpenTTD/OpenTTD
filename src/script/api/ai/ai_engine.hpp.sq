/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "../script_engine.hpp"
#include "../template/template_engine.hpp.sq"


template <> const char *GetClassName<ScriptEngine, ST_AI>() { return "AIEngine"; }

void SQAIEngine_Register(Squirrel *engine)
{
	DefSQClass<ScriptEngine, ST_AI> SQAIEngine("AIEngine");
	SQAIEngine.PreRegister(engine);
	SQAIEngine.AddConstructor<void (ScriptEngine::*)(), 1>(engine, "x");

	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::IsValidEngine,           "IsValidEngine",           2, ".i");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::IsBuildable,             "IsBuildable",             2, ".i");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::GetName,                 "GetName",                 2, ".i");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::GetCargoType,            "GetCargoType",            2, ".i");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::CanRefitCargo,           "CanRefitCargo",           3, ".ii");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::CanPullCargo,            "CanPullCargo",            3, ".ii");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::GetCapacity,             "GetCapacity",             2, ".i");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::GetReliability,          "GetReliability",          2, ".i");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::GetMaxSpeed,             "GetMaxSpeed",             2, ".i");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::GetPrice,                "GetPrice",                2, ".i");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::GetMaxAge,               "GetMaxAge",               2, ".i");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::GetRunningCost,          "GetRunningCost",          2, ".i");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::GetPower,                "GetPower",                2, ".i");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::GetWeight,               "GetWeight",               2, ".i");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::GetMaxTractiveEffort,    "GetMaxTractiveEffort",    2, ".i");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::GetDesignDate,           "GetDesignDate",           2, ".i");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::GetVehicleType,          "GetVehicleType",          2, ".i");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::IsWagon,                 "IsWagon",                 2, ".i");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::CanRunOnRail,            "CanRunOnRail",            3, ".ii");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::HasPowerOnRail,          "HasPowerOnRail",          3, ".ii");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::CanRunOnRoad,            "CanRunOnRoad",            3, ".ii");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::HasPowerOnRoad,          "HasPowerOnRoad",          3, ".ii");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::GetRoadType,             "GetRoadType",             2, ".i");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::GetRailType,             "GetRailType",             2, ".i");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::IsArticulated,           "IsArticulated",           2, ".i");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::GetPlaneType,            "GetPlaneType",            2, ".i");
	SQAIEngine.DefSQStaticMethod(engine, &ScriptEngine::GetMaximumOrderDistance, "GetMaximumOrderDistance", 2, ".i");

	SQAIEngine.PostRegister(engine);
}
